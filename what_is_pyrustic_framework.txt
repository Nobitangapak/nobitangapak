This is a very shaky tutorial. Please study the project SQLunatic to see how bits are linked in this framework.

Packages
--------

The framework consists of the following packages and folders:
- dao: Data Access Object. Create the dao files in this package. It's about having one class per file. Your dao class will help the host to retrieve data from the database. Your class can also use an instance of pyrustic.dao.Dao which implements shortcuts to communicate with your database.

- host: This is where the business code resides. The code that View calls. The 'host' uses "dao" to retrieve data

- view: This is where everything related to the graphical interface resides. It is advised that a view class is a Viewable, that is to say inherit from the abstract class pyrustic.abstract.Viewable.

- misc: Miscellaneous

- tests: Tests.

- db: Databases stay here.

- cache: Cache.

- config: config files.

- style: Stylesheets live here.

- pyrustic: The core of the framework is inside this package.



What is a Viewable
------------------

A Viewable object has a getter property:
    body

    The 'body' property returns the graphic body of the View. If the View has not yet generated a 'body', then the 'build' method will be executed implicitly.


A Viewable object has the methods already implemented:
    build(self)
    show(self)

    These methods do the same thing and return the View body. It is advisable to use the 'show' method for View which have a Toplevel type body. A View has only one body. So calling the 'build' or 'show' method multiple times will only return the same 'body'.


A Viewable must implement the following methods:
    _on_start(self)
    _on_build(self)
    _on_display(self)
    _on_close(self, **kwargs)

    When the 'build' or 'show' method is called, the following methods are executed in order: '_on_start', '_on_build', '_on_display'. The '_on_build' method must return the body of your View. The '_on_display' method is called only after the body is visible on the screen. The '_on_close' method is executed when 'close' is called. The '_on_close' method is executed just before the View is automatically destroyed.



The Beginning of Everything
---------------------------

The main.py file is the entry point. You must enter in the file the instance of the View which starts first.
Example, you want your software to start with View RootView. So in main.py we will have this:

from pyrustic.app import App
from view.rootview import RootView

app = App()
root_view = RootView(app) # assume u have: __init __ (self, app)
app.start(view = root_view) # u can also put stylesheet = "path"
